name: User
description: 'Endpoints for user authentication and profile management.'
endpoints:
  -
    httpMethods:
      - GET
    uri: api/user
    metadata:
      groupName: User
      groupDescription: 'Endpoints for user authentication and profile management.'
      subgroup: ''
      subgroupDescription: ''
      title: 'Get user profile'
      description: 'Returns the details of the currently authenticated user.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/user
    metadata:
      groupName: User
      groupDescription: 'Endpoints for user authentication and profile management.'
      subgroup: ''
      subgroupDescription: ''
      title: 'Update user profile'
      description: 'Allows the user to update their name and email address.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must not be greater than 255 characters.'
        required: true
        example: vmqeopfuudtdsufvyvddq
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      email:
        name: email
        description: 'Must be a valid email address. Must not be greater than 255 characters.'
        required: true
        example: kunde.eloisa@example.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      name: vmqeopfuudtdsufvyvddq
      email: kunde.eloisa@example.com
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/logout
    metadata:
      groupName: User
      groupDescription: 'Endpoints for user authentication and profile management.'
      subgroup: ''
      subgroupDescription: ''
      title: 'Log out'
      description: 'Revokes the current access token and logs out the user.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/bookings/calculate-price
    metadata:
      groupName: User
      groupDescription: 'Endpoints for managing user bookings (create, view, update, delete).'
      subgroup: ''
      subgroupDescription: ''
      title: 'Calculate price'
      description: 'Returns the total price for a booking based on field and time slot.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      field_id:
        name: field_id
        description: 'The <code>id</code> of an existing record in the fields table.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      start_time:
        name: start_time
        description: 'Must be a valid date. Must be a date after <code>now</code>.'
        required: true
        example: '2106-08-06'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      end_time:
        name: end_time
        description: 'Must be a valid date. Must be a date after <code>start_time</code>.'
        required: true
        example: '2106-08-05'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      field_id: consequatur
      start_time: '2106-08-06'
      end_time: '2106-08-05'
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/bookings
    metadata:
      groupName: User
      groupDescription: 'Endpoints for managing user bookings (create, view, update, delete).'
      subgroup: ''
      subgroupDescription: ''
      title: 'List bookings'
      description: "Returns a paginated list of the user's bookings."
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/bookings/{booking_id}'
    metadata:
      groupName: User
      groupDescription: 'Endpoints for managing user bookings (create, view, update, delete).'
      subgroup: ''
      subgroupDescription: ''
      title: 'Show booking'
      description: 'Returns details of a single booking if it belongs to the user.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      booking_id:
        name: booking_id
        description: 'The ID of the booking.'
        required: true
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      booking_id: 17
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/bookings
    metadata:
      groupName: User
      groupDescription: 'Endpoints for managing user bookings (create, view, update, delete).'
      subgroup: ''
      subgroupDescription: ''
      title: 'Create booking'
      description: 'Allows users to book a field for a specific time slot.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      field_id:
        name: field_id
        description: 'The <code>id</code> of an existing record in the fields table.'
        required: true
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      start_time:
        name: start_time
        description: 'Must be a valid date. Must be a date after <code>now</code>.'
        required: true
        example: '2106-08-06'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      end_time:
        name: end_time
        description: 'Must be a valid date. Must be a date after <code>start_time</code>.'
        required: true
        example: '2106-08-05'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      field_id: consequatur
      start_time: '2106-08-06'
      end_time: '2106-08-05'
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/bookings/{booking_id}'
    metadata:
      groupName: User
      groupDescription: 'Endpoints for managing user bookings (create, view, update, delete).'
      subgroup: ''
      subgroupDescription: ''
      title: 'Update booking'
      description: 'Allows users to modify their booking details.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      booking_id:
        name: booking_id
        description: 'The ID of the booking.'
        required: true
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      booking_id: 17
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      start_time:
        name: start_time
        description: 'Must be a valid date. Must be a date after <code>now</code>.'
        required: true
        example: '2106-08-06'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      end_time:
        name: end_time
        description: 'Must be a valid date. Must be a date after <code>start_time</code>.'
        required: true
        example: '2106-08-05'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      start_time: '2106-08-06'
      end_time: '2106-08-05'
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/bookings/{booking_id}'
    metadata:
      groupName: User
      groupDescription: 'Endpoints for managing user bookings (create, view, update, delete).'
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete booking'
      description: 'Allows users to cancel their booking.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      booking_id:
        name: booking_id
        description: 'The ID of the booking.'
        required: true
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanUrlParameters:
      booking_id: 17
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3V5EgbkvZcDPa166h8fd4ae'
    controller: null
    method: null
    route: null
    custom: []
